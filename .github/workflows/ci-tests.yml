#############################
## GitHub Actions CI Tests ##
#############################
#
# Based on our old CircleCI config
#
# This can be kicked off manually in the Actions tab of GitHub
# It will also run nightly at 2pm
# It will run on any pull request, except non-code changes
# (images, markdown files, )
#
name: CI Tests
on:
  workflow_dispatch:
  schedule:
    # 2am each night
    - cron: '00 2 * * *'
  pull_request:
  push:
    branches:
      - main

jobs:
  linting:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        jobs: [ 'linting', 'doclinting', 'docbuild' ]
    name: ${{ matrix.jobs }} tests
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        pip install tox
    - name: Run the tests
      run: |
        tox -e ${{ matrix.jobs }}
  python-version-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.7', '3.8', '3.9', '3.10' ]
    name: Python ${{ matrix.python-version }} tests
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        pip install tox
    - name: Set Tox Python Param
      run: |
        echo 'TOXENV<<EOF' >> $GITHUB_ENV
        echo "${{ matrix.python-version }}" | sed "s/\.//" | sed "s/^/py/" >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV
    - name: Run the tests
      run: |
        tox -e ${{ env.TOXENV }} -- -n 2 test
    - name: Upload Coverage Report
      uses: codecov/codecov-action@v1
      with:
        files: ./coverage.xml
  other-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        jobs: [ 'bench', 'mypy' ]
    name: ${{ matrix.jobs }} tests
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        pip install tox
    - name: Set Tox Params
      run: |
        echo "TOXENV=${{ matrix.jobs }}" >> $GITHUB_ENV
    - name: Run the tests
      env:
        SQLFLUFF_BENCHMARK_API_KEY: ${{ secrets.SQLFLUFF_BENCHMARK_API_KEY }}
      run: |
        tox -e ${{ env.TOXENV }}
  examples:
    runs-on: ubuntu-latest
    name: example tests
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        pip install -e .
        pip install tqdm
    - name: Test the example files
      run: |
        for file in examples/*
        do
          echo "Running $file"
          python "$file"
        done
  dbt-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dbt-version: [ 'dbt018', 'dbt019', 'dbt020', 'dbt021', 'dbt100' ]
    name: DBT Plugin ${{ matrix.dbt-version }} tests
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    - name: Install dependencies
      run: |
        pip install tox
    - name: Run the tests
      run: |
        tox -e ${{ matrix.dbt-version }} -- plugins/sqlfluff-templater-dbt
    - name: Upload Coverage Report
      uses: codecov/codecov-action@v1
      with:
        files: ./coverage.xml
  python-windows-tests:
    runs-on: windows-latest
    name: Python 3.8 Windows tests
    steps:
    - name: Set git to use LF
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    - name: List Env
      shell: bash
      run: |
        env | sort
    - name: Install dependencies
      shell: bash
      run: |
        pip install tox
    - name: Run the tests
      shell: bash
      # Set python temp dir in working dir as on GitHub Actions Windows
      # machine often has system temp dir (which tox uses) on C drive and
      # working dir on D drive which causes problems.
      run: |
        mkdir temp_pytest
        python -m tox -e winpy -- -n 2 test
    - name: Upload Coverage Report
      uses: codecov/codecov-action@v1
      with:
        files: ./coverage.xml
  python-windows-dbt-tests:
    runs-on: windows-latest
    name: DBT Plugin Python 3.8 Windows tests
    steps:
    - name: Set git to use LF
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    - name: Install dependencies
      shell: bash
      run: |
        pip install tox
    - name: Run the tests
      shell: bash
      # Do not set explicitly temp dir for dbt as causes problems
      # None of these test need temp dir set
      run: |
        python -m tox -e dbt018-winpy -- plugins/sqlfluff-templater-dbt
    - name: Upload Coverage Report
      uses: codecov/codecov-action@v1
      with:
        files: ./coverage.xml
  pip-test-pull-request:
    # Test that using pip install works as we've missed
    # some dependencies in the past - see #1842
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    name: pip install tests
    steps:
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        pip install git+https://github.com/${{ github.event.pull_request.head.repo.full_name }}@${{ github.head_ref }}
    - name: Run the version test
      run: |
        sqlfluff --version
    - name: Run a simple select parse test via stdin
      run: |
        echo "select 1" | sqlfluff parse -
    - name: Run a simple select lint test via stdin
      run: |
        echo "select 1" | sqlfluff lint -
    - name: Run a simple select parse test via file
      run: |
        sqlfluff parse <(echo "select 1")
    - name: Run a simple select lint test via file
      run: |
        sqlfluff lint <(echo "select 1")
